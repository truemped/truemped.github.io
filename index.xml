<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Daniel Truemper</title>
    <link>https://truemped.github.io/</link>
    <description>Recent content on Daniel Truemper</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 07 Jan 2019 09:41:34 +0100</lastBuildDate>
    
	<atom:link href="https://truemped.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About Me</title>
      <link>https://truemped.github.io/about/</link>
      <pubDate>Mon, 07 Jan 2019 09:41:34 +0100</pubDate>
      
      <guid>https://truemped.github.io/about/</guid>
      <description>I&amp;rsquo;m an Engineering Lead with a strong background in Search and Backend engineering. Working with Elasticsearch or Solr/Lucene is my passion and if I get to choose the programming language it&amp;rsquo;s Clojure. My third secret passion is working with Apache Kafka and especially Kafka Streams.
Since my transition into management started I discovered my passion for working with and for people. There is something special about helping people and teams succeed.</description>
    </item>
    
    <item>
      <title>Varnish All the Things</title>
      <link>https://truemped.github.io/posts/infra/varnish-all-the-things/</link>
      <pubDate>Mon, 01 Feb 2016 12:15:09 +0100</pubDate>
      
      <guid>https://truemped.github.io/posts/infra/varnish-all-the-things/</guid>
      <description>My usual web application stack for the past years was based on a nginx as reverse proxy in front of a number of Python processes. Static resources were served by nginx. Each Python process was stateless, state was stored in some kind of database. If the processes needed some shared ephemeral state like counters a local redis instance solved that. A battle tested common ground for Python based web applications.</description>
    </item>
    
    <item>
      <title>Elasticsearch DSL-DSL</title>
      <link>https://truemped.github.io/posts/elastic-dsl/</link>
      <pubDate>Wed, 29 Jul 2015 10:19:47 +0100</pubDate>
      
      <guid>https://truemped.github.io/posts/elastic-dsl/</guid>
      <description>Elasticsearch is a search server based on Apache Lucene. As a developer it is easy to use, has an expressive query DSL and all is based on JSON serialization. Often though I find myself in a position where I need to adapt queries frequently and non-trivially, say in a demonstration in front of customers or product owners.
The questions are mostly similar: &amp;ldquo;what if I also filter for X&amp;rdquo;, &amp;ldquo;how does the ranking change, when I add a freshness function&amp;rdquo;, &amp;ldquo;do I get a better result if I boost document types Y&amp;rdquo; and so on.</description>
    </item>
    
  </channel>
</rss>